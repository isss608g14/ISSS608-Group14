---
format: 
  html:
    theme: flatly
    number-sections: true

title: "Project Proposal"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Introduction

# Problem Statement

# Objectives

# What Has Been Done Before

## Music Collaboration and Network Analysis.

Many studies have developed graphs to understand how partnerships influence genre evolution, commercial success, and innovation. Bertin‐Mahieux et al. (2011) built a large‐scale collaboration network in their study from Million Song Dataset metadata, showing that centrality measures correlate with streaming popularity. Similarly, Cronin et al. (2019) used bipartite artist‐song networks to detect emergent genre clusters

## Knowledge Graphs in the Music Domain. 

Several efforts have created “music knowledge graphs” that integrate heterogeneous entities—songs, artists, labels, genres, albums—into a single directed/attributed graph. DBpedia’s music ontology and MusicBrainz’s relational schema are widely used to power recommendation systems and semantic queries. Elasticsearch‐backed knowledge graphs (e.g., Pichl et al., 2017) combine text attributes (lyrics, reviews) with structural relations to improve music recommendation. 

## Node‐Embedding and Link‐Prediction Approaches.

Node2Vec (Grover & Leskovec, 2016) and GraphSAGE (Hamilton et al., 2017) have been applied to music‐industry graphs for tasks like predicting future collaborations (e.g., “Will artist A collaborate with artist B?”) or forecasting label signings. These embedding methods can capture structural equivalences—e.g., two indie‐folk artists who both consistently work on “collaborative splits.”

# Proposed Approach

::: panel-tabset
## Data preparation and wrangling

We start with a single JSON file, MC1_graph.json, which describes a directed multigraph. Its nodes represent four types of entities—Songs, Persons, RecordLabels, and Albums. Because it is a multigraph, the same two nodes can be connected by multiple edges (for example, one edge saying a Person “wrote” a Song and another saying they “performed” it). Each edge is also labeled—“written_by,” “released_by,” “featured_on_album,” “signed_under_label,” etc.

1. Loading and Cleaning
•	Parse the JSON into a NetworkX or igraph graph.
•	Convert release_date and written_date strings into real Python dates (treat “YYYY” as January 1 of that year).
•	Normalize genres by trimming whitespace and standardize capitalization (e.g., “indie folk” → “Indie Folk”).
•	Fill missing data.
•	Check for duplicate Persons: If two Person nodes share the same name, compare their linked songs to decide if they really are the same person or two different people.

2. Building Flat Tables
Since we only have one graph, “merging” means extracting several tables for later modeling:
•	Song Table (one row per song):
o	song_id, name, genre, release_year, written_year,
o	Lists of label_ids (from “released_by” edges), writer_ids (from “written_by”), performer_ids (from “performed_by”),
o	notable (true/false).
•	Person Table (one row per person):
o	person_id, name, stage_name (if any),
o	primary_genre (to be calculated later).
•	Label Table (one row per label):
o	label_id, name,
o	num_signed_artists (count of unique Persons linked to it).
•	Album Table (one row per album):
o	album_id, name, release_year, genre, notable.
•	Edge-List Table: A simple three-column list—(source_id, target_id, edge_type)—that we’ll feed into graph-embedding algorithms.

3. Feature Engineering
We generate both structural and semantic features:
•	Structural (graph-based)
1.	Degree Centrality: For each node, count incoming edges (in-degree) and outgoing edges (out-degree).
2.	Betweenness Centrality: For Persons and Labels, measure how often they lie on shortest paths, indicating they connect different groups (e.g., linking “Indie Folk” to “Synthwave”).
•	Semantic
1.	Genre One-Hot Encoding: Create a binary column for each distinct genre. For Persons, set primary_genre as the most common genre among songs they wrote or performed.
2.	Temporal: For each Song, compute years_since_release = 2025 – release_year. For each Person, compute career_span = last_song_year – first_song_year.
3.	Label Affiliation: For each Person, count how many different Labels they’re linked to (by “signed_under_label” or “released_by”). For each Label, count how many distinct genres its songs cover.
•	Edge-Based (for predicting future collaborations)
1.	Common-Neighbor Count: For two Persons, count how many songs they both wrote or performed.
2.	Preferential Attachment: Score(p₁,p₂) = degree(p₁) × degree(p₂). 


## Shiny Application Modules

| **Library** | **Primary Functions** | **Use in This Project** |
|----|----|----|
| `janitor` | Data cleaning utilities, especially for column names | Used `clean_names()` to standardize column names for easier downstream manipulation |
| `tidyverse` | Data wrangling (`dplyr`, `tidyr`), plotting (`ggplot2`), manipulation | Filtering artists, cleaning datasets, joining tables, plotting timelines and charts |
| `jsonlite` | Reading and parsing JSON files | Likely used to import the JSON-based knowledge graph dataset |
| `visNetwork` | Interactive graph/network visualizations | Used for building interactive knowledge graphs of artists and genres |
| `tidygraph` | Graph manipulation in tidy format | Constructing tidy node-edge relationship data for network analysis |
:::

# Prototype and Storyboards

![](images/dashboard%20prototype.png)

## Genre Influence Dashboard – Overview

The **Genre Influence Dashboard** is an interactive visual analytics tool designed using Shiny app to help users explore the career trajectory of Sailor Shift and understand the broader impact of Oceanus Folk on the global music scene.

**Key Components:**

1.  **Influence Over Time**\
    A timeline graph showing how the artists influence evolved from 2010 to 2040.

2.  **Collaboration and Influence Network**\
    A network diagram mapping key collaborations both as an individual artist and as part of musical group highlighting the flow of influence across genres like Indie Pop and Indie Folk.

3.  **Heat map of Notable Songs by Genre and Decade**\
    Adapted directly from the dataset, this heatmap reveals how notable songs have emerged across genres over time. It emphasizes the peak of Dream Pop in the 2020s and the steady growth of Oceanus Folk’s presence in recent decades.

4.  **Career Trajectory of Artists**\
    A comparative line plot tracking the popularity of Sailor Shift and two peer artists, providing insight into what defines a "rising star" and informing future genre trend predictions.

# Timeline

# Deployment Plan
