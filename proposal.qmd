---
format: 
  html:
    theme: flatly
    number-sections: true

title: "Project Proposal"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Introduction

Oceanus native Sailor Shift has risen to global fame, propelling the previously local genre of Oceanus Folk onto the international stage. As both a solo artist and collaborator, Sailor has maintained a unique ability to blend genres, mentor emerging talent, and sustain a distinct musical identity rooted in her origins. This project aims to explore the evolution of Sailor Shift‚Äôs influence, her role in the rise of Oceanus Folk, and how these shifts have shaped broader trends in the global music scene.

# Problem Statement

Despite Sailor Shift‚Äôs prominence and Oceanus Folk‚Äôs growing global footprint, there is limited structured analysis of how this influence has evolved over time and what implications it may have for future artists or genres. Additionally, while Sailor has consistently supported up-and-coming artists, little work has been done to quantify the impact of her collaborations or trace stylistic inspirations across genres and time.

# Objectives

-   To analyze how Sailor Shift rose to global fame and popularized Oceanus Folk.

-   To map out her influence on emerging artists and genre trends through knowledge graph analysis.

-   To predict which artists might gain traction in the future based on historical influence patterns.

# What Has Been Done Before

## Music Collaboration and Network Analysis.

Many studies have developed graphs to understand how partnerships influence genre evolution, commercial success, and innovation. Bertin‚ÄêMahieux et al. (2011) built a large‚Äêscale collaboration network in their study from Million Song Dataset metadata, showing that centrality measures correlate with streaming popularity. Similarly, Cronin et al. (2019) used bipartite artist‚Äêsong networks to detect emergent genre clusters

## Knowledge Graphs in the Music Domain.

Several efforts have created ‚Äúmusic knowledge graphs‚Äù that integrate heterogeneous entities‚Äîsongs, artists, labels, genres, albums‚Äîinto a single directed/attributed graph. DBpedia‚Äôs music ontology and MusicBrainz‚Äôs relational schema are widely used to power recommendation systems and semantic queries. Elasticsearch‚Äêbacked knowledge graphs (e.g., Pichl et al., 2017) combine text attributes (lyrics, reviews) with structural relations to improve music recommendation.

## Node‚ÄêEmbedding and Link‚ÄêPrediction Approaches.

Node2Vec (Grover & Leskovec, 2016) and GraphSAGE (Hamilton et al., 2017) have been applied to music‚Äêindustry graphs for tasks like predicting future collaborations (e.g., ‚ÄúWill artist A collaborate with artist B?‚Äù) or forecasting label signings. These embedding methods can capture structural equivalences‚Äîe.g., two indie‚Äêfolk artists who both consistently work on ‚Äúcollaborative splits.‚Äù

# Proposed Approach

::: panel-tabset
## Data preparation and wrangling

| Step | Category | Description |
|------------------------|------------------------|------------------------|
| 1.1 Parse JSON into Graph | Loading & Cleaning | Load the MC1_graph.json file into a NetworkX or igraph multigraph object. |
| 1.2 Convert Dates | Loading & Cleaning | Convert 'release_date' and 'written_date' to datetime; fill in missing month/day as Jan 1. |
| 1.3 Normalize Genres | Loading & Cleaning | Trim whitespace, standardize capitalization in genre field (e.g., 'indie folk' ‚Üí 'Indie Folk'). |
| 1.4 Fill Missing Data | Loading & Cleaning | Handle NA/missing values for critical fields like genre, dates, names. |
| 1.5 Check Duplicate Persons | Loading & Cleaning | Detect and reconcile duplicate Persons based on name and linked songs overlap. |
| 2.1 Build Song Table | Flat Table Building | Extract: song_id, name, genre, release_year, written_year, label_ids, writer_ids, performer_ids, notable flag. |
| 2.2 Build Person Table | Flat Table Building | Extract: person_id, name, stage_name; compute primary_genre later. |
| 2.3 Build Label Table | Flat Table Building | Extract: label_id, name; count unique Persons signed under or released by this label. |
| 2.4 Build Album Table | Flat Table Building | Extract: album_id, name, release_year, genre, notable. |
| 2.5 Build Edge-List Table | Flat Table Building | Extract source_id, target_id, edge_type from graph into long format. |
| 3.1 Degree Centrality | Feature Engineering - Structural | Compute in-degree and out-degree for each node using graph structure. |
| 3.2 Betweenness Centrality | Feature Engineering - Structural | Compute betweenness centrality for Person and Label nodes. |
| 3.3 Genre One-Hot Encoding | Feature Engineering - Semantic | One-hot encode song genres. For Persons, use genres from linked songs. |
| 3.4 Compute Primary Genre | Feature Engineering - Semantic | For each Person, set primary genre as the most common among songs they wrote/performed. |
| 3.5 Compute Years Since Release | Feature Engineering - Semantic | Compute `years_since_release` = 2025 - release_year. |
| 3.6 Compute Career Span | Feature Engineering - Semantic | Compute `career_span` = last_song_year - first_song_year. |
| 3.7 Label Affiliation (Person) | Feature Engineering - Semantic | Count distinct Labels per Person (via 'signed_under_label' or 'released_by'). |
| 3.8 Label Genre Coverage | Feature Engineering - Semantic | Count how many different genres each Label covers (from linked songs). |
| 3.9 Common-Neighbor Count | Feature Engineering - Edge-Based | For every pair of Persons, count co-written or co-performed songs. |
| 3.10 Preferential Attachment | Feature Engineering - Edge-Based | Compute Score(p‚ÇÅ,p‚ÇÇ) = degree(p‚ÇÅ) √ó degree(p‚ÇÇ) for all person pairs. |

## Shiny Application Modules

| **Library** | **Primary Functions** | **Use in This Project** |
|------------------------|------------------------|------------------------|
| `janitor` | Data cleaning utilities, especially for column names | Used `clean_names()` to standardize column names for easier downstream manipulation |
| `tidyverse` | Data wrangling (`dplyr`, `tidyr`), plotting (`ggplot2`), manipulation | Filtering artists, cleaning datasets, joining tables, plotting timelines and charts |
| `jsonlite` | Reading and parsing JSON files | Likely used to import the JSON-based knowledge graph dataset |
| `visNetwork` | Interactive graph/network visualizations | Used for building interactive knowledge graphs of artists and genres |
| `tidygraph` | Graph manipulation in tidy format | Constructing tidy node-edge relationship data for network analysis |
:::

# Prototype and Storyboards

This interactive Shiny app supports journalist Silas Reed‚Äôs investigation into the evolution of Oceanus Folk music, Sailor Shift‚Äôs career, and rising star predictions using a large musical knowledge graph.

## üóÇÔ∏è Dataset Summary

-   **Total Nodes**: 17,412\
    *(Types: Person, Song, Album, MusicalGroup, RecordLabel)*

-   **Total Edges**: 37,857\
    *(Types: PerformerOf, InfluencedBy, MemberOf, ComposerOf, ProducerOf, LyricistOf, etc.)*

-   **Format**: Directed Multigraph (via NetworkX node-link JSON)

## Shiny Prototype

::: panel-tabset
## üìÅ Tab 1: Sailor Shift‚Äôs Career Explorer

![](images/prototype%20tab1.png)

**Goal**

Trace Sailor‚Äôs collaborations, direct/indirect influence links, and her influence on the Oceanus Folk community.

**Inputs**

-   **Reference Node:** Fixed to ‚ÄúSailor Shift‚Äù

-   **Network Depth Selector:** e.g., 1‚Äì3 hops from Sailor

-   **Relationship Filter:** Choose from ‚ÄúInfluenced By‚Äù, ‚ÄúCollaborated With‚Äù, ‚ÄúInfluenced Others‚Äù

-   **Year Filter:** Based on song/album notoriety year (e.g., 2023‚Äì2040)

**Outputs**

-   **Network Graph:** Interactive visNetwork centered on Sailor

-   **Temporal Timeline:** Number of notable collaborations or influenced works per year

-   **Collaboration Table:** Key artists, genres, or songs Sailor worked with

## üìÅ Tab 2: Oceanus Folk Global Influence

![](images/prototype%20tab2.png)

**Goal**

Visualize how Oceanus Folk has spread and evolved, and how other genres influenced it in return.

**Inputs**

-   **Reference Genre:** Fixed to ‚ÄúOceanus Folk‚Äù

-   **Network Depth Selector:** Show influence up to N hops

-   **Influence Direction:** Select ‚ÄúOceanus Folk ‚Üí Others‚Äù or ‚ÄúOthers ‚Üí Oceanus Folk‚Äù

-   **Date Filter:** Restrict by release/notoriety date

**Outputs**

-   **Genre Influence Network:** Knowledge graph showing genre-to-genre influence paths

-   **Trend Line Graph:** Temporal growth of Oceanus Folk influence (e.g., \# of notable influenced songs per year)

-   **Genre Inspiration Chart:** Oceanus Folk‚Äôs modern inspirations by genre

-   **Top Influenced Entities Table:** List of most influenced genres, artists, and songs

## üìÅ Tab 3: Rising Stars Dashboard

![](images/prototype%20tab3.png)

**Goal**

Define rising star traits and identify emerging Oceanus Folk artists.

**Inputs**

-   **Artist Multi-Select (max 3):** e.g., Sailor Shift, Kimberly Snyder, Copper Canyon Ghosts

-   **Debut Year Filter:** Filter artists by their entry year (e.g., 2025‚Äì2040)

-   **Emerging Artist Toggle:** Show only those with fewer than N total works but rising trend

-   **Influence Score Slider:** Filter artists with high influence-to-output ratio

**Outputs**

-   **Facet Line Chart:** Notable songs over time by selected artists

-   **Radar Chart:** Compare attributes (collaborations, genre spread, influence links)

-   **Prediction Box:** 3 predicted Oceanus Folk stars with rationale

-   **Career Trait Table:** Metrics such as total notable songs, genres, number of collaborations
:::

# Timeline

| Week | Milestone |
|----|----|
| Week 1 | Data cleaning, JSON conversion, and preliminary exploration using bar and distribution plots; finalize problem framing and objective refinement. |
| Week 2 | Build and refine network visualizations using `ggraph`, `tidygraph`, and `visNetwork` to analyze Sailor Shift‚Äôs influence and genre connections. |
| Week 3 | Develop animated influence graph over time; extract insights on top artists and genre evolution; begin drafting Quarto write-up and integrate visuals. |
| Week 4 | Finalize visualizations and narratives; complete and polish Quarto report; conduct peer review and incorporate feedback; work on project poster for final submission. |

# Deployment Plan

The final output will be presented as a Quarto report hosted on GitHub, embedded with static plots, and network visualizations. An interactive Shiny dashboard will be deployed to allow users to explore influence trends dynamically. All datasets and scripts will be publicly available for reproducibility and review. Finally, a project poster will be created and developed to showcase our findings to peers.
