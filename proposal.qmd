---
format: 
  html:
    theme: flatly
    number-sections: true

title: "Project Proposal"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Introduction

# Problem Statement

# Objectives

# What Has Been Done Before

## Music Collaboration and Network Analysis.

Many studies have developed graphs to understand how partnerships influence genre evolution, commercial success, and innovation. Bertin‐Mahieux et al. (2011) built a large‐scale collaboration network in their study from Million Song Dataset metadata, showing that centrality measures correlate with streaming popularity. Similarly, Cronin et al. (2019) used bipartite artist‐song networks to detect emergent genre clusters

## Knowledge Graphs in the Music Domain. 

Several efforts have created “music knowledge graphs” that integrate heterogeneous entities—songs, artists, labels, genres, albums—into a single directed/attributed graph. DBpedia’s music ontology and MusicBrainz’s relational schema are widely used to power recommendation systems and semantic queries. Elasticsearch‐backed knowledge graphs (e.g., Pichl et al., 2017) combine text attributes (lyrics, reviews) with structural relations to improve music recommendation. 

## Node‐Embedding and Link‐Prediction Approaches.

Node2Vec (Grover & Leskovec, 2016) and GraphSAGE (Hamilton et al., 2017) have been applied to music‐industry graphs for tasks like predicting future collaborations (e.g., “Will artist A collaborate with artist B?”) or forecasting label signings. These embedding methods can capture structural equivalences—e.g., two indie‐folk artists who both consistently work on “collaborative splits.”

# Proposed Approach

::: panel-tabset

## Data preparation and wrangling
| Step                          | Category                      | Description |
|------------------------------|-------------------------------|-------------|
| 1.1 Parse JSON into Graph     | Loading & Cleaning            | Load the MC1_graph.json file into a NetworkX or igraph multigraph object. |
| 1.2 Convert Dates             | Loading & Cleaning            | Convert 'release_date' and 'written_date' to datetime; fill in missing month/day as Jan 1. |
| 1.3 Normalize Genres          | Loading & Cleaning            | Trim whitespace, standardize capitalization in genre field (e.g., 'indie folk' → 'Indie Folk'). |
| 1.4 Fill Missing Data         | Loading & Cleaning            | Handle NA/missing values for critical fields like genre, dates, names. |
| 1.5 Check Duplicate Persons   | Loading & Cleaning            | Detect and reconcile duplicate Persons based on name and linked songs overlap. |
| 2.1 Build Song Table          | Flat Table Building           | Extract: song_id, name, genre, release_year, written_year, label_ids, writer_ids, performer_ids, notable flag. |
| 2.2 Build Person Table        | Flat Table Building           | Extract: person_id, name, stage_name; compute primary_genre later. |
| 2.3 Build Label Table         | Flat Table Building           | Extract: label_id, name; count unique Persons signed under or released by this label. |
| 2.4 Build Album Table         | Flat Table Building           | Extract: album_id, name, release_year, genre, notable. |
| 2.5 Build Edge-List Table     | Flat Table Building           | Extract source_id, target_id, edge_type from graph into long format. |
| 3.1 Degree Centrality         | Feature Engineering - Structural | Compute in-degree and out-degree for each node using graph structure. |
| 3.2 Betweenness Centrality    | Feature Engineering - Structural | Compute betweenness centrality for Person and Label nodes. |
| 3.3 Genre One-Hot Encoding    | Feature Engineering - Semantic | One-hot encode song genres. For Persons, use genres from linked songs. |
| 3.4 Compute Primary Genre     | Feature Engineering - Semantic | For each Person, set primary genre as the most common among songs they wrote/performed. |
| 3.5 Compute Years Since Release | Feature Engineering - Semantic | Compute `years_since_release` = 2025 - release_year. |
| 3.6 Compute Career Span       | Feature Engineering - Semantic | Compute `career_span` = last_song_year - first_song_year. |
| 3.7 Label Affiliation (Person)| Feature Engineering - Semantic | Count distinct Labels per Person (via 'signed_under_label' or 'released_by'). |
| 3.8 Label Genre Coverage      | Feature Engineering - Semantic | Count how many different genres each Label covers (from linked songs). |
| 3.9 Common-Neighbor Count     | Feature Engineering - Edge-Based | For every pair of Persons, count co-written or co-performed songs. |
| 3.10 Preferential Attachment  | Feature Engineering - Edge-Based | Compute Score(p₁,p₂) = degree(p₁) × degree(p₂) for all person pairs. |

## Shiny Application Modules

| **Library** | **Primary Functions** | **Use in This Project** |
|----|----|----|
| `janitor` | Data cleaning utilities, especially for column names | Used `clean_names()` to standardize column names for easier downstream manipulation |
| `tidyverse` | Data wrangling (`dplyr`, `tidyr`), plotting (`ggplot2`), manipulation | Filtering artists, cleaning datasets, joining tables, plotting timelines and charts |
| `jsonlite` | Reading and parsing JSON files | Likely used to import the JSON-based knowledge graph dataset |
| `visNetwork` | Interactive graph/network visualizations | Used for building interactive knowledge graphs of artists and genres |
| `tidygraph` | Graph manipulation in tidy format | Constructing tidy node-edge relationship data for network analysis |
:::

# Prototype and Storyboards

![](images/dashboard%20prototype.png)

## Genre Influence Dashboard – Overview

The **Genre Influence Dashboard** is an interactive visual analytics tool designed using Shiny app to help users explore the career trajectory of Sailor Shift and understand the broader impact of Oceanus Folk on the global music scene.

**Key Components:**

1.  **Influence Over Time**\
    A timeline graph showing how the artists influence evolved from 2010 to 2040.

2.  **Collaboration and Influence Network**\
    A network diagram mapping key collaborations both as an individual artist and as part of musical group highlighting the flow of influence across genres like Indie Pop and Indie Folk.

3.  **Heat map of Notable Songs by Genre and Decade**\
    Adapted directly from the dataset, this heatmap reveals how notable songs have emerged across genres over time. It emphasizes the peak of Dream Pop in the 2020s and the steady growth of Oceanus Folk’s presence in recent decades.

4.  **Career Trajectory of Artists**\
    A comparative line plot tracking the popularity of Sailor Shift and two peer artists, providing insight into what defines a "rising star" and informing future genre trend predictions.

# Timeline

# Deployment Plan
